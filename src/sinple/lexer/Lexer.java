/* The following code was generated by JFlex 1.4.1 on 07/08/06 11:26 */

package sinple.lexer;

import sinple.Sym;
import sinple.Symbol;
import sinple.Error;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 07/08/06 11:26 from the specification file
 * <tt>C:/Documents and Settings/Daniel/Desktop/flex/src/flex/lexer/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SIMPLESTRING = 2;
  public static final int YYINITIAL = 0;
  public static final int INTERPOLEDSTRING = 1;
  public static final int INCLUDEPREPROCESSOR = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\11\1\17\1\66\1\2\1\0\1\3\1\1\16\11\4\0\1\3"+
    "\1\63\1\14\1\6\1\7\1\57\1\65\1\15\1\43\1\44\1\5"+
    "\1\54\1\52\1\55\1\60\1\4\1\12\11\13\1\53\1\51\1\61"+
    "\1\56\1\62\2\0\32\10\1\45\1\16\1\46\1\0\1\10\1\0"+
    "\1\33\1\41\1\26\1\30\1\22\1\21\1\10\1\34\1\20\1\10"+
    "\1\42\1\23\1\10\1\25\1\31\1\40\1\10\1\32\1\24\1\36"+
    "\1\27\1\10\1\35\1\10\1\37\1\10\1\47\1\64\1\50\1\0"+
    "\41\11\2\0\4\10\4\0\1\10\2\0\1\11\7\0\1\10\4\0"+
    "\1\10\5\0\27\10\1\0\37\10\1\0\u013f\10\31\0\162\10\4\0"+
    "\14\10\16\0\5\10\11\0\1\10\21\0\130\11\5\0\23\11\12\0"+
    "\1\10\13\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0"+
    "\54\10\1\0\46\10\1\0\5\10\4\0\202\10\1\0\4\11\3\0"+
    "\105\10\1\0\46\10\2\0\2\10\6\0\20\10\41\0\46\10\2\0"+
    "\1\10\7\0\47\10\11\0\21\11\1\0\27\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\1\0\1\11\13\0\33\10\5\0\3\10\15\0"+
    "\4\11\14\0\6\11\13\0\32\10\5\0\13\10\16\11\7\0\12\11"+
    "\4\0\2\10\1\11\143\10\1\0\1\10\10\11\1\0\6\11\2\10"+
    "\2\11\1\0\4\11\2\10\12\11\3\10\2\0\1\10\17\0\1\11"+
    "\1\10\1\11\36\10\33\11\2\0\3\10\60\0\46\10\13\11\1\10"+
    "\u014f\0\3\11\66\10\2\0\1\11\1\10\20\11\2\0\1\10\4\11"+
    "\3\0\12\10\2\11\2\0\12\11\21\0\3\11\1\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\2\0"+
    "\1\11\1\10\7\11\2\0\2\11\2\0\3\11\11\0\1\11\4\0"+
    "\2\10\1\0\3\10\2\11\2\0\12\11\4\10\15\0\3\11\1\0"+
    "\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\2\10\1\0\2\10\2\0\1\11\1\0\5\11\4\0\2\11\2\0"+
    "\3\11\13\0\4\10\1\0\1\10\7\0\14\11\3\10\14\0\3\11"+
    "\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\2\0\1\11\1\10\10\11\1\0\3\11\1\0\3\11"+
    "\2\0\1\10\17\0\2\10\2\11\2\0\12\11\1\0\1\10\17\0"+
    "\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\2\0\1\11\1\10\6\11\3\0\2\11\2\0"+
    "\3\11\10\0\2\11\4\0\2\10\1\0\3\10\4\0\12\11\1\0"+
    "\1\10\20\0\1\11\1\10\1\0\6\10\3\0\3\10\1\0\4\10"+
    "\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10"+
    "\3\0\10\10\1\0\3\10\4\0\5\11\3\0\3\11\1\0\4\11"+
    "\11\0\1\11\17\0\11\11\11\0\1\10\7\0\3\11\1\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\4\0\7\11"+
    "\1\0\3\11\1\0\4\11\7\0\2\11\11\0\2\10\4\0\12\11"+
    "\22\0\2\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10"+
    "\1\0\5\10\2\0\1\11\1\10\7\11\1\0\3\11\1\0\4\11"+
    "\7\0\2\11\7\0\1\10\1\0\2\10\4\0\12\11\22\0\2\11"+
    "\1\0\10\10\1\0\3\10\1\0\27\10\1\0\20\10\4\0\6\11"+
    "\2\0\3\11\1\0\4\11\11\0\1\11\10\0\2\10\4\0\12\11"+
    "\22\0\2\11\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10"+
    "\2\0\7\10\3\0\1\11\4\0\6\11\1\0\1\11\1\0\10\11"+
    "\22\0\2\11\15\0\60\10\1\11\2\10\7\11\4\0\10\10\10\11"+
    "\1\0\12\11\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10"+
    "\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10"+
    "\1\0\1\10\2\0\2\10\1\0\4\10\1\11\2\10\6\11\1\0"+
    "\2\11\1\10\2\0\5\10\1\0\1\10\1\0\6\11\2\0\12\11"+
    "\2\0\2\10\42\0\1\10\27\0\2\11\6\0\12\11\13\0\1\11"+
    "\1\0\1\11\1\0\1\11\4\0\2\11\10\10\1\0\42\10\6\0"+
    "\24\11\1\0\2\11\4\10\4\0\10\11\1\0\44\11\11\0\1\11"+
    "\71\0\42\10\1\0\5\10\1\0\2\10\1\0\7\11\3\0\4\11"+
    "\6\0\12\11\6\0\6\10\4\11\106\0\46\10\12\0\51\10\7\0"+
    "\132\10\5\0\104\10\5\0\122\10\6\0\7\10\1\0\77\10\1\0"+
    "\1\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0"+
    "\47\10\1\0\1\10\1\0\4\10\2\0\37\10\1\0\1\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0"+
    "\7\10\1\0\27\10\1\0\37\10\1\0\1\10\1\0\4\10\2\0"+
    "\7\10\1\0\47\10\1\0\23\10\16\0\11\11\56\0\125\10\14\0"+
    "\u026c\10\2\0\10\10\12\0\32\10\5\0\113\10\3\0\3\10\17\0"+
    "\15\10\1\0\4\10\3\11\13\0\22\10\3\11\13\0\22\10\2\11"+
    "\14\0\15\10\1\0\3\10\1\0\2\11\14\0\64\10\40\11\3\0"+
    "\1\10\3\0\2\10\1\11\2\0\12\11\41\0\3\11\2\0\12\11"+
    "\6\0\130\10\10\0\51\10\1\11\126\0\35\10\3\0\14\11\4\0"+
    "\14\11\12\0\12\11\36\10\2\0\5\10\u038b\0\154\10\224\0\234\10"+
    "\4\0\132\10\6\0\26\10\2\0\6\10\2\0\46\10\2\0\6\10"+
    "\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10"+
    "\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10"+
    "\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10"+
    "\17\0\4\11\32\0\5\11\20\0\2\10\23\0\1\10\13\0\4\11"+
    "\6\0\6\11\1\0\1\10\15\0\1\10\40\0\22\10\36\0\15\11"+
    "\4\0\1\11\3\0\6\11\27\0\1\10\4\0\1\10\2\0\12\10"+
    "\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\0\3\10\1\0\7\10\3\0\3\10\5\0\5\10"+
    "\26\0\44\10\u0e81\0\3\10\31\0\11\10\6\11\1\0\5\10\2\0"+
    "\5\10\4\0\126\10\2\0\2\11\2\0\3\10\1\0\137\10\5\0"+
    "\50\10\4\0\136\10\21\0\30\10\70\0\20\10\u0200\0\u19b6\10\112\0"+
    "\u51a6\10\132\0\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0\73\10\225\0"+
    "\7\10\14\0\5\10\5\0\1\10\1\11\12\10\1\0\15\10\1\0"+
    "\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0"+
    "\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10\3\0\20\11\20\0"+
    "\4\11\17\0\2\10\30\0\3\10\31\0\1\10\6\0\5\10\1\0"+
    "\207\10\2\0\1\11\4\0\1\10\13\0\12\11\7\0\32\10\4\0"+
    "\1\10\1\0\32\10\12\0\132\10\3\0\6\10\2\0\6\10\2\0"+
    "\6\10\2\0\3\10\3\0\2\10\3\0\2\10\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\2\2\5\2\6"+
    "\1\7\1\10\16\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\1\1\32\2\33\1\34"+
    "\1\1\1\32\1\35\1\36\4\37\1\0\1\40\1\41"+
    "\1\42\1\43\13\5\1\44\1\45\1\5\1\46\6\5"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\45\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\4\0\2\5\1\72\12\5"+
    "\1\61\5\5\1\0\4\5\1\73\1\74\1\5\1\75"+
    "\1\5\1\76\1\5\1\77\3\5\1\100\2\5\2\0"+
    "\11\5\1\101\1\102\1\103\2\0\3\5\1\104\1\105"+
    "\2\5\1\106\1\107\2\110\1\111\1\5\1\112\1\5"+
    "\1\113\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\334\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\334\0\u025d\0\334\0\334"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\334\0\334"+
    "\0\334\0\334\0\334\0\334\0\334\0\334\0\334\0\u0596"+
    "\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\u07bc\0\u07f3\0\334\0\334\0\u082a\0\u0861\0\334"+
    "\0\334\0\334\0\u0898\0\u08cf\0\u0906\0\u093d\0\334\0\334"+
    "\0\u0974\0\u0226\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0226\0\u0226\0\u0c08"+
    "\0\u0226\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\334"+
    "\0\334\0\334\0\334\0\334\0\334\0\334\0\334\0\334"+
    "\0\334\0\334\0\334\0\334\0\334\0\334\0\334\0\334"+
    "\0\334\0\334\0\334\0\u08cf\0\u0906\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u0226\0\u10c2\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u0226"+
    "\0\u12e8\0\u131f\0\u0226\0\u1356\0\u0226\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u0226\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u0226\0\u0226\0\u0226\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u0226\0\u0226\0\u187e\0\u18b5\0\u0226\0\u0226\0\u11d5\0\334"+
    "\0\u0226\0\u18ec\0\u0226\0\u1923\0\u0226\0\u0226\0\u0226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\5\1\15\1\16\1\17\1\20\2\5\1\21\1\22"+
    "\1\23\1\14\1\24\1\25\1\26\1\14\1\27\1\30"+
    "\1\31\1\32\1\14\1\33\1\34\1\14\1\35\1\36"+
    "\1\14\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\7\1\62\1\63\1\64"+
    "\11\62\1\65\1\62\1\66\50\62\1\67\1\63\1\64"+
    "\12\67\1\70\1\71\50\67\1\72\1\73\15\72\1\74"+
    "\23\72\1\75\22\72\1\74\71\0\1\7\70\0\1\12"+
    "\1\76\50\0\1\77\66\0\1\100\10\0\1\12\1\6"+
    "\1\7\64\12\7\0\2\101\3\14\3\0\1\14\23\101"+
    "\33\0\5\14\3\0\24\14\36\0\2\16\62\0\5\14"+
    "\3\0\2\14\1\102\3\14\1\103\15\14\33\0\5\14"+
    "\3\0\10\14\1\104\1\14\1\105\1\14\1\106\7\14"+
    "\33\0\5\14\3\0\4\14\1\107\2\14\1\110\14\14"+
    "\33\0\5\14\3\0\16\14\1\111\5\14\33\0\5\14"+
    "\3\0\10\14\1\112\13\14\33\0\5\14\3\0\12\14"+
    "\1\113\1\14\1\114\7\14\33\0\5\14\3\0\3\14"+
    "\1\115\6\14\1\116\11\14\33\0\5\14\3\0\13\14"+
    "\1\117\10\14\33\0\5\14\3\0\3\14\1\120\20\14"+
    "\33\0\5\14\3\0\5\14\1\121\1\122\4\14\1\123"+
    "\10\14\33\0\5\14\3\0\15\14\1\124\6\14\33\0"+
    "\5\14\3\0\13\14\1\125\10\14\33\0\5\14\3\0"+
    "\13\14\1\126\10\14\33\0\5\14\3\0\13\14\1\127"+
    "\10\14\100\0\1\130\1\0\1\131\65\0\1\132\1\133"+
    "\66\0\1\134\66\0\1\135\66\0\1\136\66\0\1\137"+
    "\66\0\1\140\66\0\1\141\74\0\1\142\67\0\1\143"+
    "\1\0\1\62\2\0\11\62\1\0\1\62\1\0\50\62"+
    "\2\0\1\64\64\0\2\144\1\0\11\144\1\145\1\146"+
    "\1\71\2\144\1\147\3\144\1\150\4\144\1\151\3\144"+
    "\1\152\2\144\1\153\25\144\1\67\2\0\12\67\2\0"+
    "\50\67\2\0\1\72\103\0\1\154\23\0\1\155\22\0"+
    "\1\154\14\0\2\156\1\0\1\155\46\0\1\155\5\76"+
    "\1\157\61\76\7\0\5\101\3\0\24\101\33\0\5\14"+
    "\3\0\7\14\1\160\14\14\33\0\5\14\3\0\6\14"+
    "\1\161\15\14\33\0\5\14\3\0\13\14\1\162\10\14"+
    "\33\0\5\14\3\0\4\14\1\163\17\14\33\0\5\14"+
    "\3\0\5\14\1\164\16\14\33\0\5\14\3\0\15\14"+
    "\1\165\6\14\33\0\5\14\3\0\1\14\1\166\22\14"+
    "\33\0\5\14\3\0\4\14\1\167\17\14\33\0\5\14"+
    "\3\0\6\14\1\170\15\14\33\0\5\14\3\0\5\14"+
    "\1\171\16\14\33\0\5\14\3\0\2\14\1\172\21\14"+
    "\33\0\5\14\3\0\14\14\1\173\2\14\1\174\4\14"+
    "\33\0\5\14\3\0\11\14\1\175\12\14\33\0\5\14"+
    "\3\0\13\14\1\176\10\14\33\0\5\14\3\0\1\14"+
    "\1\177\22\14\33\0\5\14\3\0\10\14\1\200\13\14"+
    "\33\0\5\14\3\0\1\14\1\201\22\14\33\0\5\14"+
    "\3\0\3\14\1\202\20\14\24\0\1\203\2\0\12\203"+
    "\1\0\51\203\4\76\1\7\1\157\61\76\7\0\5\14"+
    "\3\0\4\14\1\204\17\14\33\0\5\14\3\0\7\14"+
    "\1\205\14\14\33\0\5\14\3\0\3\14\1\206\20\14"+
    "\33\0\5\14\3\0\5\14\1\207\16\14\33\0\5\14"+
    "\3\0\3\14\1\210\20\14\33\0\5\14\3\0\12\14"+
    "\1\211\11\14\33\0\5\14\3\0\17\14\1\212\4\14"+
    "\33\0\5\14\3\0\4\14\1\213\17\14\33\0\5\14"+
    "\3\0\17\14\1\214\4\14\33\0\5\14\3\0\3\14"+
    "\1\215\20\14\33\0\5\14\3\0\14\14\1\216\7\14"+
    "\33\0\5\14\3\0\11\14\1\217\12\14\33\0\5\14"+
    "\3\0\10\14\1\220\13\14\33\0\5\14\3\0\14\14"+
    "\1\221\7\14\33\0\5\14\3\0\4\14\1\222\17\14"+
    "\33\0\5\14\3\0\3\14\1\223\20\14\33\0\5\14"+
    "\3\0\6\14\1\224\15\14\33\0\5\14\3\0\14\14"+
    "\1\225\7\14\24\0\1\203\2\0\11\203\1\226\1\227"+
    "\51\203\7\0\5\14\3\0\10\14\1\230\13\14\33\0"+
    "\5\14\3\0\17\14\1\231\4\14\33\0\5\14\3\0"+
    "\14\14\1\232\7\14\33\0\5\14\3\0\3\14\1\213"+
    "\20\14\33\0\5\14\3\0\4\14\1\233\17\14\33\0"+
    "\5\14\3\0\7\14\1\234\14\14\33\0\5\14\3\0"+
    "\1\14\1\235\22\14\33\0\5\14\3\0\10\14\1\236"+
    "\13\14\33\0\5\14\3\0\4\14\1\237\17\14\33\0"+
    "\5\14\3\0\13\14\1\240\10\14\33\0\5\14\3\0"+
    "\20\14\1\241\3\14\33\0\5\14\3\0\3\14\1\242"+
    "\20\14\33\0\5\14\3\0\17\14\1\211\4\14\33\0"+
    "\5\14\3\0\23\14\1\243\24\0\1\203\2\0\11\203"+
    "\1\226\1\227\1\203\1\226\24\203\1\244\21\203\1\226"+
    "\17\0\1\227\24\0\1\245\21\0\1\227\7\0\5\14"+
    "\3\0\11\14\1\246\12\14\33\0\5\14\3\0\1\14"+
    "\1\247\22\14\33\0\5\14\3\0\7\14\1\250\14\14"+
    "\33\0\5\14\3\0\6\14\1\251\15\14\33\0\5\14"+
    "\3\0\15\14\1\252\6\14\33\0\5\14\3\0\6\14"+
    "\1\253\15\14\33\0\5\14\3\0\4\14\1\254\17\14"+
    "\33\0\5\14\3\0\6\14\1\255\15\14\33\0\5\14"+
    "\3\0\6\14\1\256\15\14\24\0\1\203\2\0\11\203"+
    "\1\226\1\227\1\203\1\244\31\203\1\257\14\203\1\244"+
    "\17\0\1\245\31\0\1\260\14\0\1\245\7\0\5\14"+
    "\3\0\3\14\1\261\20\14\33\0\5\14\3\0\12\14"+
    "\1\262\11\14\33\0\5\14\3\0\15\14\1\263\6\14"+
    "\33\0\5\14\3\0\10\14\1\264\13\14\33\0\5\14"+
    "\3\0\17\14\1\265\4\14\33\0\5\14\3\0\6\14"+
    "\1\266\15\14\33\0\5\14\3\0\3\14\1\267\20\14"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6490];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\5\1\1\11\1\1\2\11"+
    "\16\1\11\11\14\1\2\11\2\1\3\11\3\1\1\0"+
    "\2\11\27\1\24\11\4\0\23\1\1\0\22\1\2\0"+
    "\14\1\2\0\12\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int zzPushbackPos;
    int yyline;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtEOF;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, int zzPushbackPos,
                  char [] zzBuffer, boolean zzAtEOF, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzPushbackPos = zzPushbackPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /* user code: */
  private StringBuffer string = new StringBuffer();
  private java.util.Stack fileNames = new java.util.Stack();

  private Symbol symbol(int type) {
    return new Symbol(type , null );
  }

  private Symbol symbol(int type, Object value) {

    return new Symbol(type , value );
  }   

  public int getLine() {
    return yyline;
  }
  

  public String getCurrentFile() {
    return (String)fileNames.peek();
  }

  private String parseFileName() {
     String s = yytext().replaceAll( "\"" , "\'" );
     return s.substring(s.indexOf("\'")+1 , s.lastIndexOf("\'") );
  }

  public Lexer( String filename ) {     
     try {
        this.zzReader = new java.io.FileReader(filename);
        fileNames.push(filename);
     }
     catch(Exception e) {
        Error.signalError("Could not open file " + filename );
     }
  }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1760) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzPushbackPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzPushbackPos = s.zzPushbackPos;
    zzAtEOF       = s.zzAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { return symbol(Sym.CASE);
          }
        case 78: break;
        case 68: 
          { return symbol(Sym.PRINTLN);
          }
        case 79: break;
        case 42: 
          { return symbol(Sym.MINUSASSIGN);
          }
        case 80: break;
        case 71: 
          { return symbol(Sym.RETURN);
          }
        case 81: break;
        case 23: 
          { return symbol(Sym.LT);
          }
        case 82: break;
        case 22: 
          { return symbol(Sym.CONCAT);
          }
        case 83: break;
        case 70: 
          { return symbol(Sym.READLN);
          }
        case 84: break;
        case 10: 
          { return symbol(Sym.RIGHTPAR);
          }
        case 85: break;
        case 60: 
          { return symbol(Sym.PRINT);
          }
        case 86: break;
        case 4: 
          { return symbol(Sym.MULT);
          }
        case 87: break;
        case 48: 
          { return symbol(Sym.NEQ);
          }
        case 88: break;
        case 37: 
          { return symbol(Sym.OR);
          }
        case 89: break;
        case 56: 
          { string.append( '\t' );
          }
        case 90: break;
        case 63: 
          { return symbol(Sym.READ);
          }
        case 91: break;
        case 33: 
          { return symbol(Sym.MULTASSIGN);
          }
        case 92: break;
        case 1: 
          { Error.signalLexError((String)fileNames.peek() , yyline , 
                                   "Invalid character(s) \"" + yytext() + "\"");
          }
        case 93: break;
        case 67: 
          { return symbol(Sym.BREAK);
          }
        case 94: break;
        case 59: 
          { return symbol(Sym.ELSE);
          }
        case 95: break;
        case 49: 
          { return symbol(Sym.AND);
          }
        case 96: break;
        case 7: 
          { yybegin(INTERPOLEDSTRING); string.setLength(0);
          }
        case 97: break;
        case 54: 
          { string.append( '\n' );
          }
        case 98: break;
        case 76: 
          { return symbol(Sym.FUNCTION);
          }
        case 99: break;
        case 72: 
          { String file = "";
                                    try {  yypushStream(new java.io.FileReader(file = parseFileName()));
                                           fileNames.push( file );
                                           yybegin(YYINITIAL);
                                    }
                                    catch(Exception e) { Error.signalPrepError((String)fileNames.peek() , 
                                                         yyline , "Could not include file: " + file );
                                    }
          }
        case 100: break;
        case 25: 
          { return symbol(Sym.NOT);
          }
        case 101: break;
        case 47: 
          { return symbol(Sym.GE);
          }
        case 102: break;
        case 35: 
          { return symbol(Sym.IF);
          }
        case 103: break;
        case 20: 
          { return symbol(Sym.ASSIGN);
          }
        case 104: break;
        case 11: 
          { return symbol(Sym.LEFTBRACK);
          }
        case 105: break;
        case 69: 
          { return symbol(Sym.SWITCH);
          }
        case 106: break;
        case 28: 
          { yybegin(YYINITIAL); return symbol(Sym.LITERALINTERPOLEDSTRING , string.toString());
          }
        case 107: break;
        case 75: 
          { return symbol(Sym.DEFAULT);
          }
        case 108: break;
        case 46: 
          { return symbol(Sym.LE);
          }
        case 109: break;
        case 19: 
          { return symbol(Sym.MINUS);
          }
        case 110: break;
        case 29: 
          { yybegin(YYINITIAL); return symbol(Sym.LITERALSIMPLESTRING , string.toString());
          }
        case 111: break;
        case 74: 
          { return symbol(Sym.FOREACH);
          }
        case 112: break;
        case 34: 
          { return symbol(Sym.VARIDENT , yytext());
          }
        case 113: break;
        case 64: 
          { return symbol(Sym.TRUE);
          }
        case 114: break;
        case 55: 
          { string.append( '\r' );
          }
        case 115: break;
        case 61: 
          { return symbol(Sym.NULL);
          }
        case 116: break;
        case 57: 
          { string.append( '\b' );
          }
        case 117: break;
        case 18: 
          { return symbol(Sym.PLUS);
          }
        case 118: break;
        case 13: 
          { return symbol(Sym.LEFTBRACE);
          }
        case 119: break;
        case 17: 
          { return symbol(Sym.COLON);
          }
        case 120: break;
        case 65: 
          { return symbol(Sym.ARRAY);
          }
        case 121: break;
        case 40: 
          { return symbol(Sym.PLUSASSIGN);
          }
        case 122: break;
        case 51: 
          { string.append( '\"' );
          }
        case 123: break;
        case 21: 
          { return symbol(Sym.REMAINDER);
          }
        case 124: break;
        case 12: 
          { return symbol(Sym.RIGHTBRACK);
          }
        case 125: break;
        case 6: 
          { return symbol(Sym.LITERALINTEGER , new Integer(yytext()));
          }
        case 126: break;
        case 8: 
          { yybegin(SIMPLESTRING);     string.setLength(0);
          }
        case 127: break;
        case 73: 
          { yybegin(INCLUDEPREPROCESSOR);
          }
        case 128: break;
        case 39: 
          { return symbol(Sym.INCREMENT);
          }
        case 129: break;
        case 32: 
          { return symbol(Sym.DIVASSIGN);
          }
        case 130: break;
        case 77: 
          { return symbol(Sym.CONTINUE);
          }
        case 131: break;
        case 52: 
          { string.append( '\'' );
          }
        case 132: break;
        case 30: 
          { string.append( '\\' );
          }
        case 133: break;
        case 44: 
          { return symbol(Sym.REMAINDERASSIGN);
          }
        case 134: break;
        case 66: 
          { return symbol(Sym.WHILE);
          }
        case 135: break;
        case 16: 
          { return symbol(Sym.COMMA);
          }
        case 136: break;
        case 38: 
          { return symbol(Sym.AS);
          }
        case 137: break;
        case 50: 
          { Error.signalLexError((String)fileNames.peek() , yyline , "Illegal escape sequence \""+yytext()+"\"");
          }
        case 138: break;
        case 53: 
          { string.append( '\f' );
          }
        case 139: break;
        case 5: 
          { return symbol(Sym.FUNCTIONIDENT , yytext() );
          }
        case 140: break;
        case 27: 
          { Error.signalLexError((String)fileNames.peek() , yyline , "Unterminated string at end of line");
          }
        case 141: break;
        case 14: 
          { return symbol(Sym.RIGHTBRACE);
          }
        case 142: break;
        case 31: 
          { Error.signalPrepError((String)fileNames.peek() , yyline , "Bad include statement");
          }
        case 143: break;
        case 2: 
          { /* ignore */
          }
        case 144: break;
        case 45: 
          { return symbol(Sym.CONCATASSIGN);
          }
        case 145: break;
        case 26: 
          { string.append( yytext() );
          }
        case 146: break;
        case 24: 
          { return symbol(Sym.GT);
          }
        case 147: break;
        case 15: 
          { return symbol(Sym.SEMICOLON);
          }
        case 148: break;
        case 58: 
          { return symbol(Sym.FOR);
          }
        case 149: break;
        case 41: 
          { return symbol(Sym.DECREMENT);
          }
        case 150: break;
        case 43: 
          { return symbol(Sym.EQ);
          }
        case 151: break;
        case 9: 
          { return symbol(Sym.LEFTPAR);
          }
        case 152: break;
        case 36: 
          { return symbol(Sym.DO);
          }
        case 153: break;
        case 3: 
          { return symbol(Sym.DIV);
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case SIMPLESTRING: {
              Error.signalLexError((String)fileNames.peek() , yyline , "Unterminated string at end of line");
            }
            case 184: break;
            case INTERPOLEDSTRING: {
              Error.signalLexError((String)fileNames.peek() , yyline , "Unterminated string at end of line");
            }
            case 185: break;
            case INCLUDEPREPROCESSOR: {
              Error.signalPrepError((String)fileNames.peek() , yyline , "Bad include statement");
            }
            case 186: break;
            default:
              {
                if(yymoreStreams()) { yypopStream(); fileNames.pop(); }
                                   else return symbol(Sym.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          scanner = new Lexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.nextToken();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
